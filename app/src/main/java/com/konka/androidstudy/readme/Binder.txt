为什么要用binder,管道 socket 共享内存有什么问题

为什么要分成用户空间和内核空间
为什么需要区分内核空间与用户空间在 CPU 的所有指令中，有些指令是非常危险的，
如果错用，将导致系统崩溃，比如清内存、设置时钟等。如果允许所有的程序都可以使用这些指令，那么系统崩溃的概率将大大增加。
所以，CPU 将指令分为特权指令和非特权指令，对于那些危险的指令，只允许操作系统及其相关模块使用，普通应用程序只能使用那些不会造成灾难的指令。

虚拟地址和物理地址的区别

MMU(Memory Management Unit 内存管理单元)
0 : 为缓存,1 : 已缓存, null : 未分配
缺页走异常逻辑,把数据回写到磁盘和从磁盘加载数据


管道 : 半双工 , 父子进程
socket : 全双工,不需要进程依赖关系
共享内存 : 不需要进程依赖关系,拷贝少

性能好,架构好/方便使用,安全

client -> BinderProxy -> BPBinder -> 驱动 -> BBinder -> Stub -> Server端

系统服务注册在  serviceManger里面
普通服务注册在AMS里面

binder驱动并不是直接传递Parcel ,而是把Parcel对象转换成能识别的数据传递到服务端,然后再重新组装起来
memoryFile 传递大数据,大图片等


binder对象如何传递