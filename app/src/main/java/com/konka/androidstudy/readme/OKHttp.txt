OKHttp请求的整体流程是怎样的？
OKHttp分发器是怎样工作的？
OKHttp拦截器是如何工作的？
应用拦截器和网络拦截器有什么区别？
OKHttp如何复用TCP连接？
OKHttp空闲连接如何清除？
OKHttp有哪些优点？
OKHttp框架中用到了哪些设计模式？


责任链模式,应用场景
dispather 是什么
OKhttpClient 的作用是什么
request的作用是什么
realCall 是什么

应用拦截器拿到的是原始请求，可以添加一些自定义header、通用参数、参数加密、网关接入等等。
RetryAndFollowUpInterceptor处理错误重试和重定向
BridgeInterceptor应用层和网络层的桥接拦截器，
    主要工作是为请求添加cookie、添加固定的header，比如Host、Content-Length、Content-Type、User-Agent等等，然后保存响应结果的cookie，如果响应使用gzip压缩过，则还需要进行解压。
CacheInterceptor缓存拦截器，如果命中缓存则不会发起网络请求。
ConnectInterceptor连接拦截器，内部会维护一个连接池，负责连接复用、创建连接（三次握手等等）、释放连接以及创建连接上的socket流。
networkInterceptors（网络拦截器）用户自定义拦截器，通常用于监控网络层的数据传输。
CallServerInterceptor请求拦截器，在前置准备工作完成后，真正发起了网络请求。

应用拦截器和网络拦截器有什么区别


链接复用过程
    1.在创建realCall的时候会创建一个Transmitter,里面包含realConnect,connectPool,ExchangeFinder等对象
        首先判断realConnect是否可用,也就是已经连接的socket,可用就立即返回
    2.不传routes去连接池获取,匹配host,端口,代理等,如果url完全相同,那立即返回可用连接
    3.传入routes去连接池获取,主要是服用http2.0的相关数据
    4.生成一个realConnect,然后tcp+tls连接
    5.最后去获取一次连接池,因为这个是线程不安全的,有可能已经有可用的对象了,有的话会关闭当前的socket,确保HTTP2.0的多路复用

OKHttp空闲连接如何清除?
    RealConnectionPool 里面有个cleanRunnable,里面是while(true)循环,同时设置了wait超时

OKHttp有哪些优点?

使用简单，在设计时使用了外观模式，将整个系统的复杂性给隐藏起来，将子系统接口通过一个客户端OkHttpClient统一暴露出来。
扩展性强，可以通过自定义应用拦截器与网络拦截器，完成用户各种自定义的需求
功能强大，支持Spdy、Http1.X、Http2、以及WebSocket等多种协议
通过连接池复用底层TCP(Socket)，减少请求延时
无缝的支持GZIP减少数据流量
支持数据缓存,减少重复的网络请求
支持请求失败自动重试主机的其他ip，自动重定向

HTTP优化方式
    DNS问题
    直连的问题
    ip地址是会变的。比如人家服务器重启一下，就变了
    一个服务器下面是允许有多个子服务器的，所以这些子服务器对外的ip是一样的。在访问时，如果不带上Host，可能会找不到想要的服务器。
    现在基本都是使用 Https来访问了，而Https需要验证验证书，所以步骤会更加复杂。

